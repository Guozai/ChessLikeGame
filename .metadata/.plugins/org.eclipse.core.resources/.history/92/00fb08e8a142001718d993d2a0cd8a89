package logic.pieces;

import static org.junit.Assert.*;
import java.util.Collection;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import com.chess.engine.board.*;

public class KnightTest {

	Knight knight;
	Board board;
	Collection<Move> moves;

//	 0 1 2 3 4 5
//	|x|x|x|x|x|x|
//	| | | | | | |
//	| | | | | | |
//	| | | | | | |
//	| | | | | | |
//	|o|o|o|o|o|o|
//   303132333435	
	
	@Before
	public void setUp() throws Exception {
		board = Board.initialChessBoard();
	}

	
	
	@Test
	public void test13() {
		knight = new Knight(13,Colour.BLACK);
//		 0 1 2 3 4 5
//		|x|x|x|x|x|x|
//		| | | |v| | |
//		| |K| | | | |
//		| | | |v| | |
//		|v| |v| | | |
//		|o|o|o|o|o|o|
//       303132333435
		moves = knight.calcLegalMoves(board);
		assertEquals(4,moves.size());
		System.out.println("Passed test13");
	}
	
	@Test
	public void test0() {
		knight = new Knight(0,Colour.BLACK);
//		 0 1 2 3 4 5
//		|K|x|x|x|x|x|
//		| | |v| | | |
//		| |v| | | | |
//		| | | | | | |
//		| | | | | | |
//		|o|o|o|o|o|o|
//       303132333435
		moves = knight.calcLegalMoves(board);
		assertEquals(2,moves.size());
		System.out.println("Passed test0");
	}
	
	@Test
	public void test6() {
		knight = new Knight(6,Colour.BLACK);
//		 0 1 2 3 4 5
//		|x|x|x|x|x|x|
//		|K| | | | | |
//		| | |v| | | |
//		| |v| | | | |
//		| | | | | | |
//		|o|o|o|o|o|o|
//       303132333435
		moves = knight.calcLegalMoves(board);
		assertEquals(2,moves.size());
		System.out.println("Passed test6");
	}
	
	@Test
	public void test14() {
		knight = new Knight(14,Colour.BLACK);
//		 0 1 2 3 4 5
//		|x|x|x|x|x|x|
//		|v| | | |v| |
//		| | |K| | | |
//		|v| | | |v| |
//		| |v| |v| | |
//		|o|o|o|o|o|o|
//       303132333435
		moves = knight.calcLegalMoves(board);
		assertEquals(6,moves.size());
		System.out.println("Passed test14");
	}
	
	@After
	public void tearDown() throws Exception {
	}
}
